This is a study on how to run programs directly on intel machines.
It's a very complicated business.  They helped me to put in practice
what I read in the Intel manuals.  I think it would have been more fun
to use a simpler machine, but I never got one.

To compile the code now in 2018 when most computers are 64 bits, your
compiler will have to generate 32-bit binaries.  For GCC use the -m32
flag.  For LD, use -m elf_i386.  (I've added these flags to the build
script.)

By the way, in 2009, I had used tcc (the tiny c compiler) to compile
printf.c.  I can't remember why I did this.  (Maybe to produce a
smaller binary?)  But now in April 2018 I went back to GCC because I
didn't know how to force tcc to produce 32-bit object code while
running on a 64-bit system.

To compile, just say ``make'' to your shell.  

You'll need nasm, mkisofs, md5sum.  If you're using a GNU DEBIAN
system, you won't easily find mkisofs because they actually call it
genisoimage.  Install genisoimage and make a symbolic link in own your
bin directory:

  ln -s /usr/bin/genisoimage ~/bin/mkisofs
